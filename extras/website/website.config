# This is a test config file for the website generator
# First, global configuration
hostname: pyxplot.org.uk
#root: file:///home/rpc25/pyxplotWebsiteDev/public_html
#root: http://www.srcf.ucam.org/~rpc25/pplAutogeneratedWebsite/
#root: file:///home/rpc25/pyxplot/pyxplot/extras/website/public_html/
#root: http://pyxplot.org.uk/
root: file:///home/dcf21/plob
includedir: source/include
imagedir: images
pyxplot: pyxplot8

# Arrange to copy over the images 
source: img
target: images
type: inplace

# css, parsing the file that includes other files
source: css
type: inplace
source: css/style.css
type: parsed

# Root directory
source: index.html
type: parsed
source: news.html
type: parsed
source: authors.html
target: authors.html
type: parsed
source: favicon.ico
type: inplace

# Documentation -- 0.8
source: HTMLdoc/0.8
target: 0.8/doc/html
type: inplace

variable: version: 0.8.1
source: doc.html
target: 0.8/doc/index.html
type: parsed

source: library/manual-0.8.1.pdf
target: 0.8/doc/pyxplot.pdf
type: inplace

# Documentation -- 0.7
source: HTMLdoc/0.7
target: 0.7/doc/html
type: inplace

source: doc.html
target: 0.7/doc/index.html
variable: version: 0.7.1
type: parsed

source: library/manual-0.7.1.pdf
target: 0.7/doc/pyxplot.pdf
type: inplace

# Documentation -- historic
source: HTMLdoc/0.6
target: 0.6/doc/html
type: inplace

source: doc.html
target: 0.6/doc/index.html
variable: version: 0.6.3
type: parsed

source: library/manual-0.6.3.pdf
target: 0.6/doc/pyxplot.pdf
type: inplace

source: HTMLdoc/0.5
target: 0.5/doc/html
type: inplace

source: doc.html
target: 0.5/doc/index.html
variable: version: 0.5.8
type: parsed

source: library/manual-0.5.8.pdf
target: 0.5/doc/pyxplot.pdf
type: inplace

# Downloads
source: src
target: src
type: inplace

source: download-archive.html
target: archive.html
variable: current: 0.8.1
variable: currentURI: 0.8/download/
type: parsed

# Download -- current version
source: download-latest.html
target: 0.8/download/index.html
variable: version: 0.8.1
type: parsed

# Download -- 0.7
source: download-older.html
target: 0.7/download/index.html
variable: version: 0.7.1
type: parsed

# BTS
source: BTS/trac.cgi
target: bugs/trac.cgi
type: inplace
source: BTS/htaccess.raven
target: bugs/.htaccess

source: BTS/trac.cgi
target: bugs_noauth/trac.cgi

source: BTS/trac.cgi
target: bugs_httpbasic/trac.cgi
source: BTS/htaccess.httpbasic
target: bugs_httpbasic/.htaccess

# Test of the inline file reading system
target: test
source: test

source: index
target: temp/index.html
variable: title: 
type: parsed

# Examples
examples: start
exampleroot: examples
examplerootpage: examples-root.html
examplenodepage: examples-node.html
exampleleafpage: examples-leaf.html

node: start
 nodename: Plotting_Functions
 nodedir: 01pf

 leaf: start
  leafname: Blackbodies
  leafdir: 01blackbodies
  script: scripts/functions-blackbodies.ppl
  caption: A plot of several blackbodies of various temperatures
  notes: In this example we produce a plot of blackbody spectra for five different temperatures <i>T</i>, using the Planck formula which is evaluated in PyXPlot by the system-defined mathematical function <tt>Bv(nu,T)</tt>. We use the axis linkage commands to produce three parallel horizontal axes showing wavelength of light, frequency of light and photon energy.
 leaf: end

 leaf: start
  leafname: Sine_Function_Zeros
  leafdir: 02sine_zeros
  script: scripts/functions-sinezeros.ppl
  caption: A plot of zeros of the function exp(x)sin(1/x)
  notes: In this example we produce a plot illustrating some of the crossing points of the function exp(x)\sin(1/x).  We set the <tt>x</tt>-axis to have tick marks at x=0.05, 0.1, 0.2 and 0.4.  The <tt>x2</tt>-axis has custom labelled ticks at x=pi, 2pi, etc., pointing outwards from the plot.  The left-hand <tt>y</tt>-axis has tick marks placed automatically whereas the <tt>y2</tt>-axis has no tics at all.
 leaf: end

 leaf: start
  leafname: Trajectories
  leafdir: 03trajectories
  script: scripts/functions-trajectories.ppl
  caption: A plot of projectile trajectories
  notes: This plot shows the trajectories of various projectiles, projected with different velocities and angles from the horizontal. The velocities are specified in physical units using PyXPlot's built-in unit system.
 leaf: end

 leaf: start
  leafname: Spirograph
  leafdir: 04spirograph
  script: scripts/functions-spirograph.ppl
  caption: A spirograph pattern
  notes: Spirograph patterns are produced when a pen is tethered to the end of a rod which rotates at some angular speed omega_1 about the end of another rod, which is itself rotating at some angular speed omega_2 about a fixed central point. Spirographs are commonly implemented mechanically as wheels within wheels -- epicycles within deferents, mathematically speaking -- but in this example we implement them using parametric functions which are simply the sum of two circular motions with angular velocities inversely proportional to their radii. The complexity of the resulting spirograph pattern depends upon how rapidly the rods return to their starting configuration; if the two chosen angular speeds for the rods have a large lowest common multiple, then a highly complicated pattern will result. In this example we pick a ratio of 8:15.
 leaf: end

 leaf: start
  leafname: Vortex
  leafdir: 05vortex
  script: scripts/functions-vortex.ppl
  datafile: scripts/data/vortex.dat
  caption: Fluid flow around a vortex
  notes: In this example we produce a velocity map of fluid circulating in a vortex. For simplicity, we assume that the fluid in the core of the vortex, at radii r<1, is undergoing solid body rotation with velocity proportional to radius, and that the fluid outside this core is behaving as a free vortex with velocity proportional to 1/r.
 leaf: end

 leaf: start
  leafname: Cornu_Spiral
  leafdir: 06cornu
  script: scripts/functions-cornu.ppl
  caption: The Cornu spiral.
  notes: The Cornu spiral.
 leaf: end

 leaf: start
  leafname: Pendulum
  leafdir: 07pendulum
  script: scripts/functions-pendulum.ppl
  caption: The motion of a pendulum, as modelled exactly and in the small-angle approximation
  notes: See Example 13 from the Users' Guide
 leaf: end

 leaf: start
  leafname: CMBR_Temperature
  leafdir: 08cmbr_temperature
  script: scripts/functions-cmbrtemp.ppl
  caption: The temperature of the cosmic microwave background radiation as a function of time since the Big Bang, or alternatively, redshift
  notes: In this example we produce a plot of the temperature of the cosmic microwave background radiation (CMBR) as a function of time <i>t</i> since the Big Bang, on the <tt>x</tt>-axis, and equivalently as a function of redshift <i>z</i>, on the <tt>x2</tt>-axis.  The specialist cosmology function <tt>ast_Lcdm_z</tt>(<i>t</i>,<i>H_0</i>,<i>Omega_M</i>,<i>Omega_/\</i>) is used to make the highly non-linear conversion between time <i>t</i> and redshift <i>z</i>, adopting some standard values for the cosmological parameters <i>H_0</i>, <i>Omega_M</i> and <i>Omega_/\</i>. Because the temperature of the CMBR is most easily expressed as a function of redshift, we plot this function against axis <tt>x2</tt>.
 leaf: end

 leaf: start
  leafname: Fibonacci
  leafdir: 09fibonacci
  script: scripts/functions-fibonacci.ppl
  caption: The Fibonacci Sequence
  notes: The Fibonacci numbers are defined to be the sequence of numbers in which each member is the sum of its two immediate predecessors, and the first three members of the sequence are {0,1,1}. Thus, the sequence runs {0,1,1,2,3,5,8,13,21,34,55,...}. In this example, we use function splicing to calculate the Fibonacci sequence in an iterative and highly inefficient way, hard-coding the first three members of the sequence and then using the knowledge that all of the subsequent members are the sums of their two immediate predecessors.</p><p>This method is highly inefficient because each evaluation spawns two further evaluations of the function, and so the number of operations required to evaluate f(x) scales as 2^x.  It is inadvisable to evaluate it for x>25 unless you're prepared for a long wait.</p><p>A much more efficient method of calculating the Fibonacci numbers is to use Binet's formula, which provides an analytic expression for the sequence.  In the following script, we compare the values returned by these two implementations. We enable complex arithmetic as Binet's formula returns complex numbers for non-integer values of x.
 leaf: end

node: end

node: start
 nodename: Plotting_Datafiles
 nodedir: 02pd

 leaf: start
  leafname: HR_Diagram
  leafdir: 01hr_diagram
  script: scripts/datafiles-hrdiagram.ppl
  datafile: scripts/data/hrdiagram.dat.gz
  caption: A Hertzsprung Russell Diagram
  notes: Hertzsprung-Russell (HR) Diagrams are scatter-plots of the luminosities of stars plotted against their colours which reveal that most normal stars lie along a tight line called the main sequence, whilst unusual classes of stars -- giants and dwarfs -- can be readily identified on account of their not lying along this main sequence. The principal difficulty in constructing accurate HR diagrams is that the luminosities <i>L</i> of stars can only be calculated from their observed brightnesses <i>F</i>, using the relation <i>L</i>=<i>Fd</i>^2 if their distances <i>d</i> are known. In this example, we construct an HR diagram using observations made by the European Space Agency's {\tt Hipparcos} spacecraft, which accurately measured the distances of over a million stars between 1989 and 1993.
 leaf: end

 leaf: start
  leafname: Stellar_Evolution
  leafdir: 03stellar_evolution
  script: scripts/datafiles-stellarevol.ppl
  datafile: scripts/data/stellar_evolution.dat
  caption: A plot of the evolving temperature and luminosity of a star as it ages
  notes: In this example, the <tt>using</tt> modifier is utilized to plot the fourth and fifth columns of a datafile.
 leaf: end

node: end

node: start
 nodename: Three_Dimensional_Plots
 nodedir: 03td

 leaf: start
  leafname: Helix
  leafdir: 01helix
  script: scripts/td-helix.ppl
  caption: A helix.
  notes: A helix.
 leaf: end

 leaf: start
  leafname: Cornu_Spiral_3D
  leafdir: 02cornu
  script: scripts/td-cornu.ppl
  caption: A three-dimensional view of the Cornu spiral.
  notes: A three-dimensional view of the Cornu spiral.
 leaf: end

 leaf: start
  leafname: Sinc_Function
  leafdir: 03surface_sinc
  script: scripts/td-surface-sinc.ppl
  caption: The radial sinc function.
  notes: The radial sinc function.
 leaf: end

 leaf: start
  leafname: Branch_Cut
  leafdir: 04surface_sinc
  script: scripts/td-surface-log.ppl
  caption: A plot of the imaginary part of the mathematical function log(z), showing the branch cut along the negative real axis.
  notes: A plot of the imaginary part of the mathematical function log(z), showing the branch cut along the negative real axis.
 leaf: end

 leaf: start
  leafname: Cosine_Amplitude
  leafdir: 05surface_cosine
  script: scripts/td-surface-cos.ppl
  caption: The amplitude of the trigonometric function cos(x) across the complex plane.
  notes: The amplitude of the trigonometric function cos(x) across the complex plane.
 leaf: end

node: end

node: start
 nodename: Colour_Maps
 nodedir: 04cm

 leaf: start
  leafname: Cubed_Function
  leafdir: 01cubed
  script: scripts/cm-cubed.ppl
  caption: A colour map of the imaginary part of the cube of (x+iy), with branch cuts clearly visible.
  notes: A colour map of the imaginary part of the cube of (x+iy), with branch cuts clearly visible.
 leaf: end

 leaf: start
  leafname: Reimann_Zeta
  leafdir: 02reimann_zeta
  script: scripts/cm-reimann-zeta.ppl
  caption: A colour map of the complex argument of the Reimann zeta function.
  notes: A colour map of the complex argument of the Reimann zeta function.
 leaf: end

 leaf: start
  leafname: Branch_Cuts
  leafdir: 03branch_cuts
  script: scripts/cm-branch-cuts.ppl
  caption: A colour map of the function 3x^2/(x^3+1), showing the branch cuts between its poles.
  notes: A colour map of the function 3x^2/(x^3+1), showing the branch cuts between its poles.
 leaf: end

node: end

node: start
 nodename: Annotated_Plots
 nodedir: 05ap

 leaf: start
  leafname: Map_Of_Australia
  leafdir: 01map
  script: scripts/ap-map.ppl
  datafile: scripts/data/map_1.dat.gz
  datafile: scripts/data/map_2.dat
  caption: A map of Australia
  notes: .
 leaf: end

 leaf: start
  leafname: Hydrogen_Lines
  leafdir: 02hlines
  script: scripts/ap-hlines.ppl
  caption: The atomic lines of hydrogen
  notes: In this example, we use PyXPlot's loop constructs to produce a labelled diagram of the lines of hydrogen.
 leaf: end

node: end

node: start
 nodename: Mathematical_Calculations
 nodedir: 06mc

 leaf: start
  leafname: Integration_Of_Sinc_Function
  leafdir: 01intsinc
  script: scripts/maths-integration.ppl
  caption: The integral of the function sinc(x)
  notes: .
 leaf: end

 leaf: start
  leafname: Density_Of_Primes
  leafdir: 02primes
  script: scripts/maths-primes.ppl
  caption: A plot showing the density of prime numbers.
  notes: This plot illustrates the prime number theorem, which states that the density of prime numbers approximately follows the expression 1/ln(N).
 leaf: end

 leaf: start
  leafname: Fourier_Transform_Of_Top_Hat
  leafdir: 03fft
  script: scripts/maths-fft.ppl
  caption: The Fourier transform of a top-hat function
  notes: .
 leaf: end

 leaf: start
  leafname: Random_Numbers
  leafdir: 04randnum
  script: scripts/maths-pi-estimation.ppl
  caption: Estimating the value of pi using random numbers
  notes: .
 leaf: end

 leaf: start
  leafname: Interpolation
  leafdir: 05interpolation
  script: scripts/maths-interpolation.ppl
  datafile: scripts/data/interpolation.dat
  caption: A demonstration of four of the modes of interpolation available in PyXPlot
  notes: .
 leaf: end

node: end

node: start
 nodename: Vector_Graphics
 nodedir: 07vg

 leaf: start
  leafname: Pythagoras_Theorem
  leafdir: 01euclid
  script: scripts/vector-Euclid.ppl
  caption: A diagram from Euclid's Elements illustrating Pythagoras' theorem
  notes: In this more extended example script, PyXPlot's arrow and text commands are used to produce a diagram illustrating the 47th Proposition from Euclid's First Book of Elements, better known as Pythagoras' Theorem. A full text of the proof which accompanies this diagram can be found at <a href="http://www.gutenberg.org/etext/21076">Project Gutenberg</a>.
 leaf: end

 leaf: start
  leafname: Conversion_Scales
  leafdir: 02conversion
  script: scripts/vector-conversion.ppl
  caption: Conversion scales between Imperial and metric units
  notes: In this example, we use PyXPlot's automatic conversion of physical units to create conversion scales between various Imperial and metric units.
 leaf: end

 leaf: start
  leafname: A_Notice
  leafdir: 03notice
  script: scripts/vector-notice.ppl
  caption: A simple notice generated with the text and arrow commands
  notes: In this example script, we use PyXPlot's <tt>arrow</tt> and <tt>text</tt> commands to produce a simple notice advertising that a lecture has moved to a different seminar room.
 leaf: end

 leaf: start
  leafname: Nanotubes
  leafdir: 04nanotubes
  script: scripts/vector-nanotubes.ppl
  caption: A diagram of the conductivity of nanotubes
  notes: In this example we produce a diagram of the <i>irreducible wedge</i> of possible carbon nanotube configurations, highlighting those configurations which are electrically conductive. We use PyXPlot's loop constructs to automate the production of the hexagonal grid which forms the basis of the diagram.
 leaf: end

 leaf: start
  leafname: No_Entry_Sign
  leafdir: 05noentry
  script: scripts/vector-noentry.ppl
  caption: A simple no-entry sign
  notes: In this example script, we use PyXPlot's <tt>box</tt> and <tt>circle</tt> commands to produce a no-entry sign warning passers-by that code monkeys can turn nasty when interrupted from their work.
 leaf: end

 leaf: start
  leafname: Labelled_Triangles
  leafdir: 06triangles
  script: scripts/vector-triangles.ppl
  caption: Labelled diagrams of triangles
  notes: In this example, we make a subroutine to draw labelled diagrams of the interior angles of triangles, taking as its inputs the lengths of the three sides of the triangle to be drawn and the position of its lower-left corner. The subroutine calculates the positions of the three vertices of the triangle and then labels them. We use PyXPlot's automatic handling of physical units to generate the LaTeX strings required to label the side lengths in centimetres and the angles in degrees. We use PyXPlot's <tt>arc</tt> command to draw angle symbols in the three corners of a triangle.
 leaf: end

 leaf: start
  leafname: Lenses
  leafdir: 07lenses
  script: scripts/vector-lenses.ppl
  caption: Labelled diagrams of converging lenses forming real images
  notes: In this example, we make a subroutine to draw labelled diagrams of converging lenses forming real images.
 leaf: end

 leaf: start
  leafname: Labelled_Ellipse
  leafdir: 08ellipse
  script: scripts/vector-ellipse.ppl
  caption: A labelled diagram of an ellipse
  notes: Here, an ellipse of moderate eccentricity <i>e</i> is drawn using PyXPlot's <tt>ellipse</tt> command, and then its important features are labelled. The semi-major axis <i>a</i> and semi-minor axis <i>b</i> are both marked, as well as the semi-latus rectum <i>L</i>.
 leaf: end

node: end

node: start
 nodename: Pie_Charts
 nodedir: 08pc

 leaf: start
  leafname: Mass_Distribution_Of_Universe
  leafdir: 01mass_distribution
  script: scripts/pie-mass.ppl
  datafile: scripts/data/pie-mass.dat
  caption: The mass distribution of the Universe
  notes: In this example, we use PyXPlot's <tt>piechart</tt> command to produce a diagram of the composition of the Universe, showing that of the mass in the Universe, only 4% is in the form of the baryonic matter; the rest comprises 22% in the form of dark matter and 74% in the form of dark energy.
 leaf: end

node: end

node: start
 nodename: Fourier_Transforms
 nodedir: 09fourier

 leaf: start
  leafname: Disk
  leafdir: 01disk
  script: scripts/fft-disk.ppl
  caption: The Fourier transform of a disk, plotted using the colourmap plot style.
  notes: The Fourier transform of a disk, plotted using the colourmap plot style.
 leaf: end

 leaf: start
  leafname: Box
  leafdir: 02box
  script: scripts/fft-box.ppl
  caption: The Fourier transform of a rectangular box, plotted using the colourmap plot style.
  notes: The Fourier transform of a rectangular box, plotted using the colourmap plot style.
 leaf: end

 leaf: start
  leafname: Chequer_Board
  leafdir: 03chequer
  script: scripts/fft-chequerboard.ppl
  caption: The Fourier transform of a circular chequer-board pattern, plotted using the colourmap plot style.
  notes: The Fourier transform of a circular chequer-board pattern, plotted using the colourmap plot style.
 leaf: end

node: end

node: start
 nodename: Fractals
 nodedir: 10fractals

 leaf: start
  leafname: Mandelbrot_Set
  leafdir: 01mandelbrot_set
  script: scripts/fractal-mandelbrot.ppl
  caption: The Mandelbrot set, plotted using the colourmap plot style.
  notes: The Mandelbrot set, plotted using the colourmap plot style.
 leaf: end

 leaf: start
  leafname: Julia_Set
  leafdir: 02julia_set
  script: scripts/fractal-julia.ppl
  caption: A Julia set, plotted using the colourmap plot style.
  notes: A Julia set, plotted using the colourmap plot style.
 leaf: end

 leaf: start
  leafname: Newton_Fractal
  leafdir: 03newton_fractal
  script: scripts/fractal-newton.ppl
  caption: The Newton fractal for the polynomial z**3-1, plotted using the colourmap plot style.
  notes: The Newton fractal for the polynomial z**3-1, plotted using the colourmap plot style. In addition to colouring points red, green or blue depending upon which root of the polynomial the Newton-Raphson iteration converges to, we also assign points different brightnesses depending upon how long the iteration takes to converge.
 leaf: end

node: end

examples: end

