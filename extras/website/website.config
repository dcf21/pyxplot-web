# This is a test config file for the website generator
# First, global configuration
hostname: pyxplot.org.uk
#root: file:///home/rpc25/pyxplotWebsiteDev/public_html
#root: http://www.srcf.ucam.org/~rpc25/pplAutogeneratedWebsite/
#root: file:///home/rpc25/pyxplot/pyxplot/extras/website/public_html/
root: file:///home/dcf21/plob
includedir: source/include
imagedir: images
pyxplot: pyxplot8

# Arrange to copy over the images 
source: img
target: images
type: inplace

# css, parsing the file that includes other files
source: css
type: inplace
source: css/style.css
type: parsed

# Root directory
source: index.html
type: parsed
source: news.html
type: parsed
source: authors.html
target: authors.html
type: parsed

# Test of the inline file reading system
target: test
source: test

variable: title: 
source: index
target: temp/index.html
type: parsed

# Examples
examples: start
exampleroot: examples
examplerootpage: examples-root.html
examplenodepage: examples-node.html
exampleleafpage: examples-leaf.html

node: start
 nodename: Plotting_Functions
 nodedir: 01pf

 leaf: start
  leafname: blackbodies
  leafdir: 01blackbodies
  script: scripts/functions-blackbodies.ppl
  caption: A plot of several blackbodies of various temperatures
  notes: In this example we produce a plot of blackbody spectra for five different temperatures <i>T</i>, using the Planck formula which is evaluated in PyXPlot by the system-defined mathematical function <tt>Bv(nu,T)</tt>. We use the axis linkage commands to produce three parallel horizontal axes showing wavelength of light, frequency of light and photon energy.
 leaf: end

 leaf: start
  leafname: trajectories
  leafdir: 03trajectories
  script: scripts/functions-trajectories.ppl
  caption: A plot of projectile trajectories
  notes: This plot shows the trajectories of various projectiles, projected with different velocities and angles from the horizontal. The velocities are specified in physical units using PyXPlot's built-in unit system.
 leaf: end

node: end

node: start
 nodename: Plotting_Datafiles
 nodedir: 02pd

 leaf: start
  leafname: stellar_evolution
  leafdir: 03stellar_evolution
  script: scripts/datafiles-stellarevol.ppl
  datafile: scripts/data/stellar_evolution.dat
  caption: A plot of the evolving temperature and luminosity of a star as it ages
  notes: In this example, the <tt>using</tt> modifier is utilized to plot the fourth and fifth columns of a datafile.
 leaf: end

node: end

node: start
 nodename: Annotated_Plots
 nodedir: 03ap

 leaf: start
  leafname: hydrogen_lines
  leafdir: 01hlines
  script: scripts/ap-hlines.ppl
  caption: The atomic lines of hydrogen
  notes: In this example, we use PyXPlot's loop constructs to produce a labelled diagram of the lines of hydrogen.
 leaf: end

node: end

node: start
 nodename: Vector_Graphics
 nodedir: 05vg

 leaf: start
  leafname: Pythagoras_Theorem
  leafdir: 01euclid
  script: scripts/vector-Euclid.ppl
  caption: A diagram from Euclid's elements illustrating Pythagoras' theorem
  notes: In this more extended example script, PyXPlot's arrow and text commands are used to produce a diagram illustrating the 47th Proposition from Euclid's First Book of Elements, better known as Pythagoras' Theorem. A full text of the proof which accompanies this diagram can be found at http://www.gutenberg.org/etext/21076.
 leaf: end

 leaf: start
  leafname: conversion_scales
  leafdir: 09conversion
  script: scripts/vector-conversion.ppl
  caption: Conversion scales between Imperial and metric units
  notes: In this example, we use PyXPlot's automatic conversion of physical units to create conversion scales between various Imperial and metric units.
 leaf: end

 leaf: start
  leafname: notice
  leafdir: 02notice
  script: scripts/vector-notice.ppl
  caption: A simple notice generated with the text and arrow commands
  notes: In this example script, we use PyXPlot's <tt>arrow</tt> and <tt>text</tt> commands to produce a simple notice advertising that a lecture has moved to a different seminar room.
 leaf: end

 leaf: start
  leafname: nanotubes
  leafdir: 03nanotubes
  script: scripts/vector-nanotubes.ppl
  caption: A diagram of the conductivity of nanotubes
  notes: In this example we produce a diagram of the <i>irreducible wedge</i> of possible carbon nanotube configurations, highlighting those configurations which are electrically conductive. We use PyXPlot's loop constructs to automate the production of the hexagonal grid which forms the basis of the diagram.
 leaf: end

 leaf: start
  leafname: no_entry
  leafdir: 04noentry
  script: scripts/vector-noentry.ppl
  caption: A simple no-entry sign
  notes: In this example script, we use PyXPlot's <tt>box</tt> and <tt>circle</tt> commands to produce a no-entry sign warning passers by that code monkeys can turn nasty when interrupted from their work.
 leaf: end

 leaf: start
  leafname: mandelbrot
  leafdir: 05mandelbrot
  script: scripts/vector-mandelbrot.ppl
  caption: The Mandelbrot Set
  notes: The Mandelbrot set is a set of points in the complex plane, whose boundary forms a fractal. It is an iconic image of the power of chaos theory to produce complicated structure out of simple algorithms, which we implement in this example using PyXPlot's loop constructs.
 leaf: end

 leaf: start
  leafname: triangles
  leafdir: 06triangles
  script: scripts/vector-triangles.ppl
  caption: Labelled diagrams of triangles
  notes: In this example, we make a subroutine to draw labelled diagrams of the interior angles of triangles, taking as its inputs the lengths of the three sides of the triangle to be drawn and the position of its lower-left corner. The subroutine calculates the positions of the three vertices of the triangle and then labels them. We use PyXPlot's automatic handling of physical units to generate the LaTeX strings required to label the side lengths in centimetres and the angles in degrees. We use PyXPlot's <tt>arc</tt> command to draw angle symbols in the three corners of a triangle.
 leaf: end

 leaf: start
  leafname: lenses
  leafdir: 07lenses
  script: scripts/vector-lenses.ppl
  caption: Labelled diagrams of converging lenses forming real images
  notes: In this example, we make a subroutine to draw labelled diagrams of converging lenses forming real images.
 leaf: end

 leaf: start
  leafname: ellipse
  leafdir: 08ellipse
  script: scripts/vector-ellipse.ppl
  caption: A labelled diagram of an ellipse
  notes: Here, an ellipse of moderate eccentricity <i>e</i> is drawn using PyXPlot's <tt>ellipse</tt> command, and then its important features are labelled. The semi-major axis <i>a</i> and semi-minor axis <i>b</i> are both marked, as well as the semi-latus rectum <i>L</i>.
 leaf: end

node: end

node: start
 nodename: Pie_Charts
 nodedir: 06pc

 leaf: start
  leafname: mass_distribution
  leafdir: 01mass_distribution
  script: scripts/pie-mass.ppl
  datafile: scripts/data/pie-mass.dat
  caption: The mass distribution of the Universe
  notes: In this example, we use PyXPlot's <tt>piechart</tt> command to produce a diagram of the composition of the Universe, showing that of the mass in the Universe, only 4% is in the form of the baryonic matter; of the rest, 22% is in the form of dark matter and 74\% in the form of dark energy.
 leaf: end

node: end

examples: end

