# This is a test config file for the website generator
# First, global configuration
hostname: pyxplot.org.uk
root: file:///home/dcf21/pyxplot/extras/website/output
#root: http://pyxplot.org.uk/new
includedir: source/include
imagedir: images
pyxplot: pyxplot9

# Arrange to copy over robots.txt file
source: robots.txt
target: robots.txt
type: inplace
source: google97b1895dd6619486.html
target: google97b1895dd6619486.html
type: inplace

# Arrange to copy over the images 
source: img
target: images
type: inplace

# Arrange to copy over the astrolabe
source: astrolabe
target: astrolabe
type: inplace

# css, parsing the file that includes other files
source: css
type: inplace
source: css/style.css
type: parsed

# Root directory
source: index.html
type: parsed
source: news.html
type: parsed
source: authors.html
target: authors.html
type: parsed
source: bugs.html
target: bugs.html
type: parsed
source: favicon.ico
type: inplace

source: doc.html
target: doc.html
type: parsed

# Documentation -- 0.9
source: HTMLdoc/0.9
target: 0.9/doc/html
type: inplace

source: library/manual-0.9.0.pdf
target: 0.9/doc/pyxplot.pdf
type: inplace

# Documentation -- 0.8
source: HTMLdoc/0.8
target: 0.8/doc/html
type: inplace

source: library/manual-0.8.4.pdf
target: 0.8/doc/pyxplot.pdf
type: inplace

# Documentation -- 0.7
source: HTMLdoc/0.7
target: 0.7/doc/html
type: inplace

source: library/manual-0.7.1.pdf
target: 0.7/doc/pyxplot.pdf
type: inplace

# Documentation -- historic
source: HTMLdoc/0.6
target: 0.6/doc/html
type: inplace

source: library/manual-0.6.3.pdf
target: 0.6/doc/pyxplot.pdf
type: inplace

#source: HTMLdoc/0.5
#target: 0.5/doc/html
#type: inplace

#source: library/manual-0.5.8.pdf
#target: 0.5/doc/pyxplot.pdf
#type: inplace

# Downloads
source: src
target: src
type: inplace

source: tmp_htaccess
target: .htaccess
type: inplace

source: src_htaccess
target: src/.htaccess
type: inplace

source: download.html
target: download.html
type: parsed

# Examples
examples: start
exampleroot: examples
examplerootpage: examples-root.html
examplenodepage: examples-node.html
exampleleafpage: examples-leaf.html

node: start
 nodename: Plotting_functions
 nodedir: 01pf

 leaf: start
  leafname: Blackbodies
  leafdir: 01blackbodies
  script: scripts/functions-blackbodies.ppl
  caption: A plot with multiple horizontal axes with linked scales
  notes: In this example we produce a plot of blackbody spectra for five different temperatures <i>T</i>, using the Planck formula which is evaluated in Pyxplot by the system-defined mathematical function <tt>Bv(nu,T)</tt>. We use the axis linkage commands to produce three parallel horizontal axes showing wavelength of light, frequency of light and photon energy.
 leaf: end

 leaf: start
  leafname: Sine_function_zeros
  leafdir: 02sine_zeros
  script: scripts/functions-sinezeros.ppl
  caption: A plot with custom axis ticks
  notes: In this example we produce a plot illustrating some of the crossing points of the function exp(x)\sin(1/x).  We set the <tt>x</tt>-axis to have tick marks at x=0.05, 0.1, 0.2 and 0.4.  The <tt>x2</tt>-axis has custom labelled ticks at x=pi, 2pi, etc., pointing outwards from the plot.  The left-hand <tt>y</tt>-axis has tick marks placed automatically whereas the <tt>y2</tt>-axis has no tics at all.
 leaf: end

 leaf: start
  leafname: Trajectories
  leafdir: 03trajectories
  script: scripts/functions-trajectories.ppl
  caption: A plot whose axes have physical dimensions of length
  notes: This plot shows the trajectories of various projectiles, projected with different velocities and angles from the horizontal. The velocities are specified in physical units using Pyxplot's built-in unit system.
 leaf: end

 leaf: start
  leafname: Spirograph
  leafdir: 04spirograph
  script: scripts/functions-spirograph.ppl
  caption: A parametric plot of a spirograph pattern
  notes: Spirograph patterns are produced when a pen is tethered to the end of a rod which rotates at some angular speed omega_1 about the end of another rod, which is itself rotating at some angular speed omega_2 about a fixed central point. Spirographs are commonly implemented mechanically as wheels within wheels -- epicycles within deferents, mathematically speaking -- but in this example we implement them using parametric functions which are simply the sum of two circular motions with angular velocities inversely proportional to their radii. The complexity of the resulting spirograph pattern depends upon how rapidly the rods return to their starting configuration; if the two chosen angular speeds for the rods have a large lowest common multiple, then a highly complicated pattern will result. In this example we pick a ratio of 8:15.
 leaf: end

 leaf: start
  leafname: Vortex
  leafdir: 05vortex
  script: scripts/functions-vortex.ppl
  datafile: scripts/data/vortex.dat
  caption: A demonstration of the arrows plotting style: fluid flow around a vortex
  notes: In this example we produce a velocity map of fluid circulating in a vortex. For simplicity, we assume that the fluid in the core of the vortex, at radii r<1, is undergoing solid body rotation with velocity proportional to radius, and that the fluid outside this core is behaving as a free vortex with velocity proportional to 1/r.
 leaf: end

 leaf: start
  leafname: Cornu_spiral
  leafdir: 06cornu
  script: scripts/functions-cornu.ppl
  caption: A parametric plot which uses Pyxplot's numerical integration function to draw a Cornu spiral
  notes: The Cornu spiral.
 leaf: end

 leaf: start
  leafname: Pendulum
  leafdir: 07pendulum
  script: scripts/functions-pendulum.ppl
  caption: Example plot - the motion of a pendulum
  notes: See Example 13 from the Users' Guide
 leaf: end

 leaf: start
  leafname: CMBR_temperature
  leafdir: 08cmbr_temperature
  script: scripts/functions-cmbrtemp.ppl
  caption: A demonstration of Pyxplot's in-built cosmology functions, and of an axis with a custom non-linear scale
  notes: In this example we produce a plot of the temperature of the cosmic microwave background radiation (CMBR) as a function of time <i>t</i> since the Big Bang, on the <tt>x</tt>-axis, and equivalently as a function of redshift <i>z</i>, on the <tt>x2</tt>-axis.  The specialist cosmology function <tt>ast_Lcdm_z</tt>(<i>t</i>,<i>H_0</i>,<i>Omega_M</i>,<i>Omega_/\</i>) is used to make the highly non-linear conversion between time <i>t</i> and redshift <i>z</i>, adopting some standard values for the cosmological parameters <i>H_0</i>, <i>Omega_M</i> and <i>Omega_/\</i>. Because the temperature of the CMBR is most easily expressed as a function of redshift, we plot this function against axis <tt>x2</tt>.
 leaf: end

 leaf: start
  leafname: Fibonacci_sequence
  leafdir: 09fibonacci_sequence
  script: scripts/functions-fibonacci.ppl
  caption: An example of the use of function splicing, to compute Fibonacci numbers
  notes: The Fibonacci numbers are defined to be the sequence of numbers in which each member is the sum of its two immediate predecessors, and the first three members of the sequence are {0,1,1}. Thus, the sequence runs {0,1,1,2,3,5,8,13,21,34,55,...}. In this example, we use function splicing to calculate the Fibonacci sequence in an iterative and highly inefficient way, hard-coding the first three members of the sequence and then using the knowledge that all of the subsequent members are the sums of their two immediate predecessors.</p><p>This method is highly inefficient because each evaluation spawns two further evaluations of the function, and so the number of operations required to evaluate f(x) scales as 2^x.  It is inadvisable to evaluate it for x>25 unless you're prepared for a long wait.</p><p>A much more efficient method of calculating the Fibonacci numbers is to use Binet's formula, which provides an analytic expression for the sequence.  In the following script, we compare the values returned by these two implementations. We enable complex arithmetic as Binet's formula returns complex numbers for non-integer values of x.
 leaf: end

node: end

node: start
 nodename: Plotting_data_files
 nodedir: 02pd

 leaf: start
  leafname: HR_diagram
  leafdir: 01hr_diagram
  script: scripts/datafiles-hrdiagram.ppl
  datafile: scripts/data/hrdiagram.dat.gz
  caption: Using the dots plotting style to draw a Hertzsprung-Russell diagram
  notes: Hertzsprung-Russell (HR) Diagrams are scatter-plots of the luminosities of stars plotted against their colors which reveal that most normal stars lie along a tight line called the main sequence, whilst unusual classes of stars -- giants and dwarfs -- can be readily identified on account of their not lying along this main sequence. The principal difficulty in constructing accurate HR diagrams is that the luminosities <i>L</i> of stars can only be calculated from their observed brightnesses <i>F</i>, using the relation <i>L</i>=<i>Fd</i>^2 if their distances <i>d</i> are known. In this example, we construct an HR diagram using observations made by the European Space Agency's {\tt Hipparcos} spacecraft, which accurately measured the distances of over a million stars between 1989 and 1993.
 leaf: end

 leaf: start
  leafname: Stellar_evolution
  leafdir: 03stellar_evolution
  script: scripts/datafiles-stellarevol.ppl
  datafile: scripts/data/stellar_evolution.dat
  caption: Example plot - the evolution of a star
  notes: In this example, the <tt>using</tt> modifier is utilized to plot the fourth and fifth columns of a datafile.
 leaf: end

node: end

node: start
 nodename: Three_dimensional_plots
 nodedir: 03td

 leaf: start
  leafname: Helix
  leafdir: 01helix
  script: scripts/td-helix.ppl
  caption: A three-dimensional plot, and a line of variable color
  notes: A helix.
 leaf: end

 leaf: start
  leafname: Cornu_spiral_3D
  leafdir: 02cornu
  script: scripts/td-cornu.ppl
  caption: Example plot - a 3D view of the Cornu spiral
  notes: A three-dimensional view of the Cornu spiral.
 leaf: end

 leaf: start
  leafname: Sinc_function
  leafdir: 03surface_sinc
  script: scripts/td-surface-sinc.ppl
  caption: An example of the surface plotting style
  notes: A surface showing the radial sinc function.
 leaf: end

 leaf: start
  leafname: Surface_with_contours
  leafdir: 04surface_with_contours
  script: scripts/td-surface-contours.ppl
  caption: An example of a surface and contours on a 3D plot
  notes: A solid surface with contours projected beneath.
 leaf: end

 leaf: start
  leafname: Branch_cut
  leafdir: 05surface_branch_cut
  script: scripts/td-surface-log.ppl
  caption: An example of the surface plotting style, and a branch cut
  notes: A plot of the imaginary part of the mathematical function log(z), showing the branch cut along the negative real axis.
 leaf: end

 leaf: start
  leafname: Cosine_amplitude
  leafdir: 06surface_cosine
  script: scripts/td-surface-cos.ppl
  caption: An example of the surface plotting style, with variable color
  notes: The amplitude of the trigonometric function cos(x) across the complex plane.
 leaf: end

node: end

node: start
 nodename: Color_maps
 nodedir: 04cm

 leaf: start
  leafname: Colormap_with_contours
  leafdir: 01colormap_with_contours
  script: scripts/cm-contours.ppl
  caption: An example of the color map plotting style, with superimposed contours
  notes: A color map of the function x^3/20+y^2, with superimposed contours.
 leaf: end

 leaf: start
  leafname: Riemann_zeta
  leafdir: 02riemann_zeta
  script: scripts/cm-riemann-zeta.ppl
  caption: An example of the color map plotting style
  notes: A color map of the complex argument of the Riemann zeta function.
 leaf: end

 leaf: start
  leafname: Branch_cuts
  leafdir: 03branch_cuts
  script: scripts/cm-branch-cuts.ppl
  caption: An example of the color map plotting style with custom color mapping
  notes: A color map of the function 3x^2/(x^3+1), showing the branch cuts between its poles.
 leaf: end

 leaf: start
  leafname: RGB_color_mixing
  leafdir: 04rgb_color_mixing
  script: scripts/cm-rgb.ppl
  caption: Using the color map plotting style to produce an arbitrary color image (I)
  notes: RGB color mixing.
 leaf: end

 leaf: start
  leafname: CMYK_color_mixing
  leafdir: 05cmyk_color_mixing
  script: scripts/cm-cmyk.ppl
  caption: Using the color map plotting style to produce an arbitrary color image (II)
  notes: CMYK color mixing.
 leaf: end

 leaf: start
  leafname: Cubed_function
  leafdir: 06cubed
  script: scripts/cm-cubed.ppl
  caption: Example plot - a color map with branch cuts
  notes: A color map of the imaginary part of the cube of (x+iy), with branch cuts clearly visible.
 leaf: end

node: end

node: start
 nodename: Annotated_plots
 nodedir: 05ap

 leaf: start
  leafname: Map_Of_Australia
  leafdir: 01map
  script: scripts/ap-map.ppl
  datafile: scripts/data/map_1.dat.gz
  datafile: scripts/data/map_2.dat
  caption: Using Pyxplot's 'set arrow' and 'set label' commands (I)
  notes: A map of Australia.
 leaf: end

 leaf: start
  leafname: Hydrogen_lines
  leafdir: 02hlines
  script: scripts/ap-hlines.ppl
  caption: Using Pyxplot's 'set arrow' and 'set label' commands (II)
  notes: In this example, we use Pyxplot's loop constructs to produce a labelled diagram of the lines of hydrogen.
 leaf: end

node: end

node: start
 nodename: Electromagnetic_spectra
 nodedir: 06sp

 leaf: start
  leafname: Electromagnetic_spectrum
  leafdir: 01spec
  script: scripts/sp-spectrum.ppl
  caption: Demonstration of Pyxplot's in-built capability to produce color representations of different wavelengths of light.
  notes: .
 leaf: end

 leaf: start
  leafname: Blackbody_colors
  leafdir: 02bbcol
  script: scripts/sp-bbcol.ppl
  caption: Demonstration of Pyxplot's in-built capability to produce color representations of arbitrary electromagnetic spectra.
  notes: .
 leaf: end

 leaf: start
  leafname: Birefringent_wedge
  leafdir: 03wedge
  script: scripts/sp-wedge.ppl
  caption: Example plot - the computed colors of a wedge of stressed plastic between crossed polars.
  notes: .
 leaf: end

node: end

node: start
 nodename: Vector_graphics
 nodedir: 07vg

 leaf: start
  leafname: Labelled_triangles
  leafdir: 01triangles
  script: scripts/vector-triangles.ppl
  caption: Using the polygon command and Pyxplot's maths environment to construct triangles
  notes: In this example, we make a subroutine to draw labelled diagrams of the interior angles of triangles, taking as its inputs the lengths of the three sides of the triangle to be drawn and the position of its lower-left corner. The subroutine calculates the positions of the three vertices of the triangle and then labels them. We use Pyxplot's automatic handling of physical units to generate the LaTeX strings required to label the side lengths in centimetres and the angles in degrees. We use Pyxplot's <tt>arc</tt> command to draw angle symbols in the three corners of a triangle.
 leaf: end

 leaf: start
  leafname: Conversion_scales
  leafdir: 02conversion
  script: scripts/vector-conversion.ppl
  caption: Using linked axes and Pyxplot's automatic conversion of physical units to create unit conversion scales
  notes: In this example, we use Pyxplot's automatic conversion of physical units to create conversion scales between various Imperial and metric units.
 leaf: end

 leaf: start
  leafname: Polygons
  leafdir: 03polygons
  script: scripts/vector-polygons.ppl
  caption: Using the polygon command
  notes: This example uses the polygon command, rotation matrix, and nested for loops to construct diagrams of the first eight regular polygons.
 leaf: end

 leaf: start
  leafname: Lenses
  leafdir: 04lenses
  script: scripts/vector-lenses.ppl
  caption: Using the arc command to draw an optics diagram
  notes: In this example, we make a subroutine to draw labelled diagrams of converging lenses forming real images.
 leaf: end

 leaf: start
  leafname: Labelled_ellipse
  leafdir: 05ellipse
  script: scripts/vector-ellipse.ppl
  caption: Using the ellipse command to draw a labelled ellipse
  notes: Here, an ellipse of moderate eccentricity <i>e</i> is drawn using Pyxplot's <tt>ellipse</tt> command, and then its important features are labelled. The semi-major axis <i>a</i> and semi-minor axis <i>b</i> are both marked, as well as the semi-latus rectum <i>L</i>.
 leaf: end

 leaf: start
  leafname: Pythagoras_theorem
  leafdir: 06euclid
  script: scripts/vector-Euclid.ppl
  caption: Using lines, boxes and text labels for geometric construction
  notes: In this more extended example script, Pyxplot's arrow and text commands are used to produce a diagram illustrating the 47th Proposition from Euclid's First Book of Elements, better known as Pythagoras' Theorem. A full text of the proof which accompanies this diagram can be found at <a href="http://www.gutenberg.org/etext/21076">Project Gutenberg</a>.
 leaf: end

 leaf: start
  leafname: A_notice
  leafdir: 07notice
  script: scripts/vector-notice.ppl
  caption: Using the text and arrow commands to draw a notice
  notes: In this example script, we use Pyxplot's <tt>arrow</tt> and <tt>text</tt> commands to produce a simple notice advertising that a lecture has moved to a different seminar room.
 leaf: end

 leaf: start
  leafname: A_clock
  leafdir: 08Clock
  script: scripts/vector-clock.ppl
  caption: Example plot - a novelty clock
  notes: In this example script, we use Pyxplot's <tt>text</tt> command and <tt>stars</tt> plotting style to produce a clock where all of the numerals are made up from three nines.
 leaf: end

 leaf: start
  leafname: Nanotube_conductivity
  leafdir: 08nanotube_conductivity
  script: scripts/vector-nanotubes.ppl
  caption: Example plot - the conductivity of nanotubes
  notes: In this example we produce a diagram of the <i>irreducible wedge</i> of possible carbon nanotube configurations, highlighting those configurations which are electrically conductive. We use Pyxplot's loop constructs to automate the production of the hexagonal grid which forms the basis of the diagram.
 leaf: end

 leaf: start
  leafname: No_entry_sign
  leafdir: 09noentry
  script: scripts/vector-noentry.ppl
  caption: Using the circle and box commands to make a no-entry sign
  notes: In this example script, we use Pyxplot's <tt>box</tt> and <tt>circle</tt> commands to produce a no-entry sign warning passers-by that code monkeys can turn nasty when interrupted from their work.
 leaf: end

node: end

node: start
 nodename: Fourier_transforms
 nodedir: 08fourier

 leaf: start
  leafname: Disk
  leafdir: 01disk
  script: scripts/fft-disk.ppl
  caption: Using the colormap plot style with the fft command to draw a diffraction pattern (I)
  notes: The Fourier transform of a disk, plotted using the colormap plot style.
 leaf: end

 leaf: start
  leafname: Box
  leafdir: 02box
  script: scripts/fft-box.ppl
  caption: Using the colormap plot style with the fft command to draw a diffraction pattern (II)
  notes: The Fourier transform of a rectangular box, plotted using the colormap plot style.
 leaf: end

 leaf: start
  leafname: Chequer_board
  leafdir: 03chequer
  script: scripts/fft-chequerboard.ppl
  caption: Using the colormap plot style with the fft command to draw a diffraction pattern (III)
  notes: The Fourier transform of a circular chequer-board pattern, plotted using the colormap plot style.
 leaf: end

node: end

node: start
 nodename: Fractals
 nodedir: 09fractals

 leaf: start
  leafname: Mandelbrot_set
  leafdir: 01mandelbrot_set
  script: scripts/fractal-mandelbrot.ppl
  caption: Example plot - using the colormap plot style to draw the Mandelbrot set
  notes: The Mandelbrot set, plotted using the colormap plot style.
 leaf: end

 leaf: start
  leafname: Julia_set
  leafdir: 02julia_set
  script: scripts/fractal-julia.ppl
  caption: Example plot - using the colormap plot style to draw the Julia set
  notes: A Julia set, plotted using the colormap plot style.
 leaf: end

 leaf: start
  leafname: Newton_fractal
  leafdir: 03newton_fractal
  script: scripts/fractal-newton.ppl
  caption: Example plot - using the colormap plot style to draw the Newton fractal
  notes: The Newton fractal for the polynomial z**3-1, plotted using the colormap plot style. In addition to coloring points red, green or blue depending upon which root of the polynomial the Newton-Raphson iteration converges to, we also assign points different brightnesses depending upon how long the iteration takes to converge.
 leaf: end

node: end

node: start
 nodename: Pie_charts
 nodedir: 10pc

 leaf: start
  leafname: Mass_distribution_of_the_Universe
  leafdir: 01mass_distribution
  script: scripts/pie-mass.ppl
  datafile: scripts/data/pie-mass.dat
  caption: Using the piechart command to draw a pie chart
  notes: In this example, we use Pyxplot's <tt>piechart</tt> command to produce a diagram of the composition of the Universe, showing that of the mass in the Universe, only 4% is in the form of the baryonic matter; the rest comprises 22% in the form of dark matter and 74% in the form of dark energy.
 leaf: end

node: end

node: start
 nodename: Mathematical_calculations
 nodedir: 11mc

 leaf: start
  leafname: Density_of_primes
  leafdir: 01primes
  script: scripts/maths-primes.ppl
  caption: Example plot - the density of prime numbers
  notes: This plot illustrates the prime number theorem, which states that the density of prime numbers approximately follows the expression 1/ln(N).
 leaf: end

 leaf: start
  leafname: Integration_of_the_sinc_function
  leafdir: 02intsinc
  script: scripts/maths-integration.ppl
  caption: Using Pyxplot's numerical integration function
  notes: .
 leaf: end

 leaf: start
  leafname: Fourier_transform_of_top_hat
  leafdir: 03fft
  script: scripts/maths-fft.ppl
  caption: Using Pyxplot's Fourier transform command
  notes: .
 leaf: end

 leaf: start
  leafname: Random_numbers
  leafdir: 04randnum
  script: scripts/maths-pi-estimation.ppl
  caption: Using Pyxplot's random number generator
  notes: .
 leaf: end

 leaf: start
  leafname: Interpolation
  leafdir: 05interpolation
  script: scripts/maths-interpolation.ppl
  datafile: scripts/data/interpolation.dat
  caption: The four of the modes of interpolation available in Pyxplot
  notes: .
 leaf: end

node: end

examples: end

